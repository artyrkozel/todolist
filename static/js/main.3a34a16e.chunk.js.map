{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldsErrors","undefined","slice","createSlice","name","initialState","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskAC","task","todoListId","updateTaskAC","t","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","deadline","description","priority","startDate","then","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","justify","marginTop","xs","handleSubmit","FormControl","FormLabel","textAlign","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","top","width","CircularProgress","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a34a16e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c7bbacee-9383-4bb5-9da6-5eaa531e6320'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {field: string, error: string}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, FieldErrorType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginTC = createAsyncThunk<{isLoggedIn: boolean}, LoginParamsType, {rejectValue: {errors: Array<string>, fieldsErrors?: Array<FieldErrorType>}}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\n\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC\r\n    , changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    let res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// actions\r\nexport const {addTaskAC, updateTaskAC} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task,todolistId,removeTask,changeTaskStatus,changeTaskTitle, ...props}) => {\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [removeTask, task.id, todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [changeTaskStatus, task.id, todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [changeTaskTitle, task.id,todolistId]);\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [demo, props.todolist.id, dispatch])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [props.removeTodolist])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [isLoggedIn, demo, dispatch])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype FromValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values:FromValuesType, formikHelpers:FormikHelpers<FromValuesType>) => {\r\n           const action = await dispatch(loginTC(values));\r\n           if (loginTC.rejected.match(action)){\r\n               if (action.payload?.fieldsErrors?.length){\r\n                   const error = action.payload?.fieldsErrors[0]\r\n                   formikHelpers.setFieldError(error.field, error.error)\r\n               }\r\n           }\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\" style={{marginTop: '30px'}}>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel style={{textAlign: 'center'}}>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}  rel=\"noopener noreferrer\" >here</a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <div>\r\n                            <b> Email: free@samuraijs.com</b>\r\n                        </div>\r\n                        <div>\r\n                            <b>Password: free</b>\r\n                        </div>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, CircularProgress, Container, IconButton,\r\n    LinearProgress, Toolbar} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo){\r\n        dispatch(initializeAppTC())}\r\n    }, [dispatch, demo])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}